; Riemann configuration rules
; vim: filetype=clojure :

; Log output to a file.
(logging/init {:file "/var/log/riemann/riemann.log"})
(logging/set-level "riemann.transport.tcp" ch.qos.logback.classic.Level/INFO)
(logging/set-level "riemann.transport.udp" ch.qos.logback.classic.Level/INFO)

; Accept metrics via TCP.
(tcp-server :host "0.0.0.0" :port 5555)

; Serve websockets for riemann-dash.
(ws-server :host "0.0.0.0" :port 5556)

; Sweep the index for expired events every N seconds.
(periodically-expire 10)



;; ## Stream Configuration

(require
  '[clojure.string :as str]
  :reload-all)


(def env
  (->> (System/getenv)
       (map (fn [[k v]] [(keyword (str/lower-case (str/replace k "_" "-"))) v]))
       (into {})))


(def influxdb-writer
  (batch 100 1
    (async-queue! :influxdb
      {:queue-size 1000
       :core-pool-size 2
       :max-pools-size 8}
      (influxdb {:scheme   "http"
                 :host     "localhost"
                 :db       "merkledb"
                 ;:username (env :influxdb-user     "riemann")
                 ;:password (env :influxdb-pass)
                 :version :0.9}))))


(let [index (default {:ttl 300} (index))]
  (streams
    ; For now, just record things to the index.
    index
    influxdb-writer))
