; Riemann configuration rules
; vim: filetype=clojure :


;; ## General Setup

(require
  '[clojure.tools.logging :as log]
  '[clojure.string :as str]
  :reload-all)


(def env
  (->> (System/getenv)
       (map (fn [[k v]] [(keyword (str/lower-case (str/replace k "_" "-"))) v]))
       (into {})))


; Log output to a file.
(logging/init {:file "/var/log/riemann/riemann.log"})
(logging/set-level "riemann.transport.tcp" ch.qos.logback.classic.Level/INFO)
(logging/set-level "riemann.transport.udp" ch.qos.logback.classic.Level/INFO)

; Accept metrics via TCP.
(tcp-server :host "0.0.0.0" :port 5555)

; Serve websockets for riemann-dash.
(ws-server :host "0.0.0.0" :port 5556)

; Sweep the index for expired events every N seconds.
(periodically-expire 10)



;; ## Event Recording

(defn- format-value
  "Canonically formats a metric value for recording."
  [event]
  (when-let [value (:metric event)]
    (cond
      (integer? value)
        (long value)
      (float? value)
        (double value)
      (ratio? value)
        (double value)
      :else
        (log/warnf "Measurement %s has unexpected value type %s: %s"
                   (:service event)
                   (.getName (class value))
                   (pr-str value)))))


(defn- format-influx-point
  "Reformat a Riemann event into a point suitable for writing to InfluxDB."
  [event]
  (let [event-time (:time event)
        measurement (:service event)
        tag-attrs (:influxdb/tags (meta event) #{:host})
        tags (into {}
                   (remove (comp str/blank? val))
                   (select-keys event tag-attrs))
        fields (-> (apply dissoc event tag-attrs)
                   (dissoc :time :service :metric :ttl :tags)
                   (assoc :value (format-value event))
                   (cond->
                     (seq (:tags event))
                     (assoc :riemann_tags (str/join " " (:tags event)))))]
    (when (and event-time measurement)
      (merge
        {:time event-time
         :measurement measurement
         :influxdb-tags tags
         :influxdb-fields fields}
        (when-let [retention (:influxdb/retention (meta event))]
          {:retention retention})
        (when-let [database (:influxdb/database (meta event))]
          {:db database})))))


(defn with-influx-tags
  "Applies metadata to the events passing through the stream so that they will
  be indexed (tagged) on the given fields."
  [tags & children]
  (fn apply-tags
    [event]
    (call-rescue
      (vary-meta event assoc :influxdb/tags (set tags))
      children)))


(def write-influxdb
  "Asynchronous batch writer to record events to InfluxDB."
  (pipe -*
    (not-expired -*)
    (batch 500 1 -*)
    (async-queue! :influxdb
      {:queue-size 1000
       :core-pool-size 2
       :max-pools-size 8}
      (let [write! (influxdb
                     {:version :new-stream
                      :scheme "http"
                      :host (env :influxdb-host "localhost")
                      :db (env :influxdb-db "merkledb")})]
        (fn influx-writer
          [events]
          (try
            (write! (into [] (map format-influx-point) events))
            (catch Exception ex
              (log/errorf "Failure while writing %d events to InfluxDB: %s %s"
                          (count events)
                          (.getMessage ex)
                          (or (ex-data ex) "")))))))))


(def write-index
  "Record events to Riemann's internal index."
  (default {:ttl 300}
    (index)))


(def record-event
  "Record events to both the index and influxdb."
  (sdo
    write-index
    write-influxdb))



;; ## Stream Configuration

(defn index-solanum-sources
  "Apply custom tagging metadata to solanum events so that they can be indexed
  appropriately in InfluxDB. Passes all events to the given child stream."
  [out]
  (split
    ; cpu
    (service "cpu core usage")
    (with-influx-tags #{:host :core}
      out)

    (service "cpu core state")
    (with-influx-tags #{:host :core :state}
      out)

    ; disk-space
    (service "disk space usage")
    (with-influx-tags #{:host :mount}
      out)

    ; disk-stats
    (service #"^disk stats ")
    (with-influx-tags #{:host :device}
      out)

    ; http
    (service "http url time" "http url health")
    (with-influx-tags #{:host :label}
      out)

    ; network
    (service #"^net io ")
    (with-influx-tags #{:host :interface}
      out)

    ; process
    (service "process count"
             "process resident-set bytes"
             "process virtual-memory bytes")
    (with-influx-tags #{:host :process}
      out)

    ; tcp
    (service "tcp socket open")
    (with-influx-tags #{:host :port}
      out)

    ; other sources just indexed by host
    (with-influx-tags #{:host}
      out)))


(streams
  (pipe -*
    ; Wrap top-level error handling so it shows up in the logs.
    (exception-stream
      (fn stream-error
        [err-event]
        (log/error "Exception while handling events:" (pr-str err-event))
        (try
          (-> err-event
              (dissoc :event :exception)
              (assoc :metric 1)
              (record-event))
          (catch Exception ex
            (log/error ex "Failed to handle stream exception event!"))))
        -*)

    ; Preprocessing streams.
    (split
      ; Add custom indexing to solanum events.
      (tagged "solanum")
      (index-solanum-sources -*)

      ; Pass on all other events.
      -*)

    ; Default record all events.
    record-event))
